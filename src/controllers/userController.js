const fs = require("fs");
const path = require("path");
const logger = require("../utils/logger");
const botConfigPath = path.join(__dirname, "../config/botConfig.json");
const { hasExceededTimeout } = require("../utils/timeUtils");
const { BOT_SETTINGS } = require("../config/settings");

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ activeUsers ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
let activeUsers = {};

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå botConfig.json ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
function ensureBotConfigExists() {
  if (!fs.existsSync(botConfigPath)) {
    const defaultConfig = { activeUsers: {} };
    fs.writeFileSync(botConfigPath, JSON.stringify(defaultConfig, null, 2));
    logger.info("üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå botConfig.json ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  }
}

// ‡πÇ‡∏´‡∏•‡∏î activeUsers ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
function loadActiveUsers() {
  ensureBotConfigExists();
  try {
    const data = fs.readFileSync(botConfigPath, "utf8");
    activeUsers = JSON.parse(data).activeUsers || {};
    logger.info("üîÑ ‡πÇ‡∏´‡∏•‡∏î activeUsers ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  } catch (error) {
    logger.error("‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î activeUsers ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
  }
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å activeUsers ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
function saveActiveUsers() {
  fs.writeFileSync(botConfigPath, JSON.stringify({ activeUsers }, null, 2));
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
function updateUserActivity(userId, hasInteracted = false) {
  if (!activeUsers[userId]) {
    activeUsers[userId] = { lastActive: Date.now(), hasInteracted };
  } else {
    activeUsers[userId].lastActive = Date.now();
    if (hasInteracted) activeUsers[userId].hasInteracted = true;
  }
  saveActiveUsers();
}

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
function checkInactiveUsers(client) {
  setInterval(async () => {
    for (const userId in activeUsers) {
      const { lastActive, hasInteracted } = activeUsers[userId];

      if (hasExceededTimeout(lastActive, BOT_SETTINGS.ACTIVE_TIMEOUT)) {  
        if (hasInteracted) {
          try {
            const user = await client.users.fetch(userId);
            await user.send("‚è≥ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß! ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏¢‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ mention (@) ‡∏ö‡∏≠‡∏ó‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üòä");
          } catch (error) {
            logger.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤ ${userId}: ${error.message}`);
          }
        }
        delete activeUsers[userId];
        saveActiveUsers();
        logger.info(`üîÑ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å activeUsers ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà active`);
      }
    }
  }, BOT_SETTINGS.INTERVAL_CHECK); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ INTERVAL_CHECK ‡∏à‡∏≤‡∏Å settings.js
}

/** 
 * ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô Discord (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á DM ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏™‡πà‡∏á)
 */
async function handleDelete(interaction) {
  try {
    await interaction.deferReply({ flags: 64 });

    const amount = interaction.options.getInteger("amount");

    if (!amount || amount <= 0 || amount > 100) {
      return await interaction.editReply("‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1 ‡∏ñ‡∏∂‡∏á 100");
    }

    const channel = interaction.channel;

    if (!channel) {
      return await interaction.editReply("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏™‡∏ô‡∏ó‡∏ô‡∏≤)");
    }

    // üîπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô DM (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏™‡πà‡∏á)
    if (channel.isDMBased()) {
      const messages = await channel.messages.fetch({ limit: amount });

      // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏™‡πà‡∏á
      const botMessages = messages.filter(msg => msg.author.id === interaction.client.user.id);

      if (botMessages.size === 0) {
        return await interaction.editReply("üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÉ‡∏ô DM");
      }

      for (const msg of botMessages.values()) {
        await msg.delete();
      }

      return await interaction.editReply(`üì≠ ‡∏•‡∏ö ${botMessages.size} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô DM ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‚ú®`);
    }

    // üîπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)
    const fetchedMessages = await channel.messages.fetch({ limit: amount });
    await channel.bulkDelete(fetchedMessages, true);

    await interaction.editReply(`üßπ ‡∏•‡∏ö ${fetchedMessages.size} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‚ú®`);
  } catch (error) {
    logger.error("‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
    await interaction.editReply("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ");
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å loadActiveUsers ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î
loadActiveUsers();

module.exports = { activeUsers, updateUserActivity, checkInactiveUsers, handleDelete, loadActiveUsers };
