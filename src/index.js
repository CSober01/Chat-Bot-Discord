const dotenv = require("dotenv");
const { Client, GatewayIntentBits, Events } = require("discord.js");
const { handleDelete } = require("./controllers/userController");
const { handleChat } = require("./controllers/chatController");
const { fetchMessageHistory } = require("./services/messageService");
const { updateUserActivity, checkInactiveUsers, activeUsers } = require("./controllers/userController");
const logger = require("./utils/logger");
const { BOT_SETTINGS, FEATURE_SETTINGS } = require("./config/settings");

// ‡πÇ‡∏´‡∏•‡∏î ENV
dotenv.config();
const DISCORD_TOKEN = process.env.DISCORD_TOKEN;

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
const { ENABLE_CHATBOT, ENABLE_HANDLE_DELETE } = FEATURE_SETTINGS;

// ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô context
const MESSAGE_HISTORY_LIMIT = BOT_SETTINGS.MESSAGE_HISTORY_LIMIT;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Client ‡∏Ç‡∏≠‡∏á Discord Bot
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.DirectMessages,
  ],
});

// Event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
client.once("ready", () => {
  logger.info(`‚úÖ Logged in as ${client.user.tag}!`);
});

// Handle Delete Command
if (ENABLE_HANDLE_DELETE) {
  client.on(Events.InteractionCreate, async (interaction) => {
    if (!interaction.isChatInputCommand()) return;
    if (interaction.commandName === "delete") {
      await handleDelete(interaction);
    }
  });
}

// Handle Chat Bot Mentions
if (ENABLE_CHATBOT) {
  client.on("messageCreate", async (message) => {
    if (message.author.bot || !message.content) return;
    const userId = message.author.id;

    // ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ mention ‡∏ö‡∏≠‡∏ó ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà active ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    const isMentioned = message.mentions.has(client.user);
    const isActive = activeUsers[userId] !== undefined;
    const channelName = message.channel.type === 1 ? "DM" : message.channel.name;

    if (isMentioned && !isActive) {
      // ‚úÖ 1. mention ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
      const prompt = message.content.replace(`<@${client.user.id}>`, "").trim();
      logger.info(`üì¢ @mention ‡∏à‡∏≤‡∏Å ${message.author.tag} ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á ${channelName}`);

      if (!prompt) {
        updateUserActivity(userId, false);
        return message.reply("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üòä ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö?");
      }

      // ‚úÖ 2. mention ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI ‡∏ï‡∏≠‡∏ö **(‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥)**
      updateUserActivity(userId, true);
      return await handleChat(message, prompt);
    }

    if (isMentioned && isActive) {
      // ‚úÖ 3. mention ‡πÇ‡∏î‡∏¢ activeUser
      logger.info(`üì¢ @mention ‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å ${message.author.tag} ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á ${channelName}`);
      updateUserActivity(userId, true);

      const prompt = message.content.replace(`<@${client.user.id}>`, "").trim();
      if (!prompt) {
        return message.reply("‡∏Ñ‡∏£‡∏±‡∏ö üòä ‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö?");
      }

      // üìå ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏±‡πâ‡∏ô **‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° mention ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î**
      const context = await fetchMessageHistory(message.channel, userId, MESSAGE_HISTORY_LIMIT, true);
      return await handleChat(message, prompt, context);
    }

    if (isActive && !isMentioned) {
      // ‚úÖ 5. activeUser ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI ‡∏ï‡∏≠‡∏ö **(‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ user ‡∏ô‡∏±‡πâ‡∏ô ‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° mention ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)**
      updateUserActivity(userId, true);

      if (!message.content.trim()) return;

      logger.info(`üí¨ activeUser ${message.author.tag} ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`, false);
      const context = await fetchMessageHistory(message.channel, userId, MESSAGE_HISTORY_LIMIT, true);
      return await handleChat(message, message.content.trim(), context);
    }
  });

  checkInactiveUsers(client);
}

// ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Discord
client.login(DISCORD_TOKEN);
